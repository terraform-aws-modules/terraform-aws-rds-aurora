module "wrapper" {
  source = "../"

  for_each = var.items

  allocated_storage                                      = try(each.value.allocated_storage, var.defaults.allocated_storage, null)
  allow_major_version_upgrade                            = try(each.value.allow_major_version_upgrade, var.defaults.allow_major_version_upgrade, false)
  apply_immediately                                      = try(each.value.apply_immediately, var.defaults.apply_immediately, null)
  auto_minor_version_upgrade                             = try(each.value.auto_minor_version_upgrade, var.defaults.auto_minor_version_upgrade, null)
  autoscaling_enabled                                    = try(each.value.autoscaling_enabled, var.defaults.autoscaling_enabled, false)
  autoscaling_max_capacity                               = try(each.value.autoscaling_max_capacity, var.defaults.autoscaling_max_capacity, 2)
  autoscaling_min_capacity                               = try(each.value.autoscaling_min_capacity, var.defaults.autoscaling_min_capacity, 0)
  autoscaling_policy_name                                = try(each.value.autoscaling_policy_name, var.defaults.autoscaling_policy_name, "target-metric")
  autoscaling_scale_in_cooldown                          = try(each.value.autoscaling_scale_in_cooldown, var.defaults.autoscaling_scale_in_cooldown, 300)
  autoscaling_scale_out_cooldown                         = try(each.value.autoscaling_scale_out_cooldown, var.defaults.autoscaling_scale_out_cooldown, 300)
  autoscaling_target_connections                         = try(each.value.autoscaling_target_connections, var.defaults.autoscaling_target_connections, 700)
  autoscaling_target_cpu                                 = try(each.value.autoscaling_target_cpu, var.defaults.autoscaling_target_cpu, 70)
  availability_zones                                     = try(each.value.availability_zones, var.defaults.availability_zones, null)
  backtrack_window                                       = try(each.value.backtrack_window, var.defaults.backtrack_window, null)
  backup_retention_period                                = try(each.value.backup_retention_period, var.defaults.backup_retention_period, null)
  ca_cert_identifier                                     = try(each.value.ca_cert_identifier, var.defaults.ca_cert_identifier, null)
  cloudwatch_log_group_class                             = try(each.value.cloudwatch_log_group_class, var.defaults.cloudwatch_log_group_class, null)
  cloudwatch_log_group_kms_key_id                        = try(each.value.cloudwatch_log_group_kms_key_id, var.defaults.cloudwatch_log_group_kms_key_id, null)
  cloudwatch_log_group_retention_in_days                 = try(each.value.cloudwatch_log_group_retention_in_days, var.defaults.cloudwatch_log_group_retention_in_days, 7)
  cloudwatch_log_group_skip_destroy                      = try(each.value.cloudwatch_log_group_skip_destroy, var.defaults.cloudwatch_log_group_skip_destroy, null)
  cloudwatch_log_group_tags                              = try(each.value.cloudwatch_log_group_tags, var.defaults.cloudwatch_log_group_tags, {})
  cluster_ca_cert_identifier                             = try(each.value.cluster_ca_cert_identifier, var.defaults.cluster_ca_cert_identifier, null)
  cluster_members                                        = try(each.value.cluster_members, var.defaults.cluster_members, null)
  cluster_monitoring_interval                            = try(each.value.cluster_monitoring_interval, var.defaults.cluster_monitoring_interval, 0)
  cluster_performance_insights_enabled                   = try(each.value.cluster_performance_insights_enabled, var.defaults.cluster_performance_insights_enabled, null)
  cluster_performance_insights_kms_key_id                = try(each.value.cluster_performance_insights_kms_key_id, var.defaults.cluster_performance_insights_kms_key_id, null)
  cluster_performance_insights_retention_period          = try(each.value.cluster_performance_insights_retention_period, var.defaults.cluster_performance_insights_retention_period, null)
  cluster_scalability_type                               = try(each.value.cluster_scalability_type, var.defaults.cluster_scalability_type, null)
  cluster_tags                                           = try(each.value.cluster_tags, var.defaults.cluster_tags, {})
  cluster_timeouts                                       = try(each.value.cluster_timeouts, var.defaults.cluster_timeouts, {})
  cluster_use_name_prefix                                = try(each.value.cluster_use_name_prefix, var.defaults.cluster_use_name_prefix, false)
  compute_redundancy                                     = try(each.value.compute_redundancy, var.defaults.compute_redundancy, null)
  copy_tags_to_snapshot                                  = try(each.value.copy_tags_to_snapshot, var.defaults.copy_tags_to_snapshot, null)
  create                                                 = try(each.value.create, var.defaults.create, true)
  create_cloudwatch_log_group                            = try(each.value.create_cloudwatch_log_group, var.defaults.create_cloudwatch_log_group, false)
  create_db_cluster_activity_stream                      = try(each.value.create_db_cluster_activity_stream, var.defaults.create_db_cluster_activity_stream, false)
  create_db_cluster_parameter_group                      = try(each.value.create_db_cluster_parameter_group, var.defaults.create_db_cluster_parameter_group, false)
  create_db_parameter_group                              = try(each.value.create_db_parameter_group, var.defaults.create_db_parameter_group, false)
  create_db_subnet_group                                 = try(each.value.create_db_subnet_group, var.defaults.create_db_subnet_group, false)
  create_monitoring_role                                 = try(each.value.create_monitoring_role, var.defaults.create_monitoring_role, true)
  create_security_group                                  = try(each.value.create_security_group, var.defaults.create_security_group, true)
  create_shard_group                                     = try(each.value.create_shard_group, var.defaults.create_shard_group, false)
  database_insights_mode                                 = try(each.value.database_insights_mode, var.defaults.database_insights_mode, null)
  database_name                                          = try(each.value.database_name, var.defaults.database_name, null)
  db_cluster_activity_stream_kms_key_id                  = try(each.value.db_cluster_activity_stream_kms_key_id, var.defaults.db_cluster_activity_stream_kms_key_id, null)
  db_cluster_activity_stream_mode                        = try(each.value.db_cluster_activity_stream_mode, var.defaults.db_cluster_activity_stream_mode, null)
  db_cluster_db_instance_parameter_group_name            = try(each.value.db_cluster_db_instance_parameter_group_name, var.defaults.db_cluster_db_instance_parameter_group_name, null)
  db_cluster_instance_class                              = try(each.value.db_cluster_instance_class, var.defaults.db_cluster_instance_class, null)
  db_cluster_parameter_group_description                 = try(each.value.db_cluster_parameter_group_description, var.defaults.db_cluster_parameter_group_description, null)
  db_cluster_parameter_group_family                      = try(each.value.db_cluster_parameter_group_family, var.defaults.db_cluster_parameter_group_family, "")
  db_cluster_parameter_group_name                        = try(each.value.db_cluster_parameter_group_name, var.defaults.db_cluster_parameter_group_name, null)
  db_cluster_parameter_group_parameters                  = try(each.value.db_cluster_parameter_group_parameters, var.defaults.db_cluster_parameter_group_parameters, [])
  db_cluster_parameter_group_use_name_prefix             = try(each.value.db_cluster_parameter_group_use_name_prefix, var.defaults.db_cluster_parameter_group_use_name_prefix, true)
  db_parameter_group_description                         = try(each.value.db_parameter_group_description, var.defaults.db_parameter_group_description, null)
  db_parameter_group_family                              = try(each.value.db_parameter_group_family, var.defaults.db_parameter_group_family, "")
  db_parameter_group_name                                = try(each.value.db_parameter_group_name, var.defaults.db_parameter_group_name, null)
  db_parameter_group_parameters                          = try(each.value.db_parameter_group_parameters, var.defaults.db_parameter_group_parameters, [])
  db_parameter_group_use_name_prefix                     = try(each.value.db_parameter_group_use_name_prefix, var.defaults.db_parameter_group_use_name_prefix, true)
  db_shard_group_identifier                              = try(each.value.db_shard_group_identifier, var.defaults.db_shard_group_identifier, null)
  db_subnet_group_name                                   = try(each.value.db_subnet_group_name, var.defaults.db_subnet_group_name, "")
  delete_automated_backups                               = try(each.value.delete_automated_backups, var.defaults.delete_automated_backups, null)
  deletion_protection                                    = try(each.value.deletion_protection, var.defaults.deletion_protection, null)
  domain                                                 = try(each.value.domain, var.defaults.domain, null)
  domain_iam_role_name                                   = try(each.value.domain_iam_role_name, var.defaults.domain_iam_role_name, null)
  enable_global_write_forwarding                         = try(each.value.enable_global_write_forwarding, var.defaults.enable_global_write_forwarding, null)
  enable_http_endpoint                                   = try(each.value.enable_http_endpoint, var.defaults.enable_http_endpoint, null)
  enable_local_write_forwarding                          = try(each.value.enable_local_write_forwarding, var.defaults.enable_local_write_forwarding, null)
  enabled_cloudwatch_logs_exports                        = try(each.value.enabled_cloudwatch_logs_exports, var.defaults.enabled_cloudwatch_logs_exports, [])
  endpoints                                              = try(each.value.endpoints, var.defaults.endpoints, {})
  engine                                                 = try(each.value.engine, var.defaults.engine, null)
  engine_lifecycle_support                               = try(each.value.engine_lifecycle_support, var.defaults.engine_lifecycle_support, null)
  engine_mode                                            = try(each.value.engine_mode, var.defaults.engine_mode, "provisioned")
  engine_native_audit_fields_included                    = try(each.value.engine_native_audit_fields_included, var.defaults.engine_native_audit_fields_included, false)
  engine_version                                         = try(each.value.engine_version, var.defaults.engine_version, null)
  final_snapshot_identifier                              = try(each.value.final_snapshot_identifier, var.defaults.final_snapshot_identifier, null)
  global_cluster_identifier                              = try(each.value.global_cluster_identifier, var.defaults.global_cluster_identifier, null)
  iam_database_authentication_enabled                    = try(each.value.iam_database_authentication_enabled, var.defaults.iam_database_authentication_enabled, null)
  iam_role_description                                   = try(each.value.iam_role_description, var.defaults.iam_role_description, null)
  iam_role_force_detach_policies                         = try(each.value.iam_role_force_detach_policies, var.defaults.iam_role_force_detach_policies, null)
  iam_role_managed_policy_arns                           = try(each.value.iam_role_managed_policy_arns, var.defaults.iam_role_managed_policy_arns, null)
  iam_role_max_session_duration                          = try(each.value.iam_role_max_session_duration, var.defaults.iam_role_max_session_duration, null)
  iam_role_name                                          = try(each.value.iam_role_name, var.defaults.iam_role_name, null)
  iam_role_path                                          = try(each.value.iam_role_path, var.defaults.iam_role_path, null)
  iam_role_permissions_boundary                          = try(each.value.iam_role_permissions_boundary, var.defaults.iam_role_permissions_boundary, null)
  iam_role_use_name_prefix                               = try(each.value.iam_role_use_name_prefix, var.defaults.iam_role_use_name_prefix, false)
  iam_roles                                              = try(each.value.iam_roles, var.defaults.iam_roles, {})
  instance_class                                         = try(each.value.instance_class, var.defaults.instance_class, "")
  instance_timeouts                                      = try(each.value.instance_timeouts, var.defaults.instance_timeouts, {})
  instances                                              = try(each.value.instances, var.defaults.instances, {})
  instances_use_identifier_prefix                        = try(each.value.instances_use_identifier_prefix, var.defaults.instances_use_identifier_prefix, false)
  iops                                                   = try(each.value.iops, var.defaults.iops, null)
  is_primary_cluster                                     = try(each.value.is_primary_cluster, var.defaults.is_primary_cluster, true)
  kms_key_id                                             = try(each.value.kms_key_id, var.defaults.kms_key_id, null)
  manage_master_user_password                            = try(each.value.manage_master_user_password, var.defaults.manage_master_user_password, true)
  manage_master_user_password_rotation                   = try(each.value.manage_master_user_password_rotation, var.defaults.manage_master_user_password_rotation, false)
  master_password                                        = try(each.value.master_password, var.defaults.master_password, null)
  master_user_password_rotate_immediately                = try(each.value.master_user_password_rotate_immediately, var.defaults.master_user_password_rotate_immediately, null)
  master_user_password_rotation_automatically_after_days = try(each.value.master_user_password_rotation_automatically_after_days, var.defaults.master_user_password_rotation_automatically_after_days, null)
  master_user_password_rotation_duration                 = try(each.value.master_user_password_rotation_duration, var.defaults.master_user_password_rotation_duration, null)
  master_user_password_rotation_schedule_expression      = try(each.value.master_user_password_rotation_schedule_expression, var.defaults.master_user_password_rotation_schedule_expression, null)
  master_user_secret_kms_key_id                          = try(each.value.master_user_secret_kms_key_id, var.defaults.master_user_secret_kms_key_id, null)
  master_username                                        = try(each.value.master_username, var.defaults.master_username, null)
  max_acu                                                = try(each.value.max_acu, var.defaults.max_acu, null)
  min_acu                                                = try(each.value.min_acu, var.defaults.min_acu, null)
  monitoring_interval                                    = try(each.value.monitoring_interval, var.defaults.monitoring_interval, 0)
  monitoring_role_arn                                    = try(each.value.monitoring_role_arn, var.defaults.monitoring_role_arn, "")
  name                                                   = try(each.value.name, var.defaults.name, "")
  network_type                                           = try(each.value.network_type, var.defaults.network_type, null)
  performance_insights_enabled                           = try(each.value.performance_insights_enabled, var.defaults.performance_insights_enabled, null)
  performance_insights_kms_key_id                        = try(each.value.performance_insights_kms_key_id, var.defaults.performance_insights_kms_key_id, null)
  performance_insights_retention_period                  = try(each.value.performance_insights_retention_period, var.defaults.performance_insights_retention_period, null)
  port                                                   = try(each.value.port, var.defaults.port, null)
  predefined_metric_type                                 = try(each.value.predefined_metric_type, var.defaults.predefined_metric_type, "RDSReaderAverageCPUUtilization")
  preferred_backup_window                                = try(each.value.preferred_backup_window, var.defaults.preferred_backup_window, "02:00-03:00")
  preferred_maintenance_window                           = try(each.value.preferred_maintenance_window, var.defaults.preferred_maintenance_window, "sun:05:00-sun:06:00")
  publicly_accessible                                    = try(each.value.publicly_accessible, var.defaults.publicly_accessible, null)
  putin_khuylo                                           = try(each.value.putin_khuylo, var.defaults.putin_khuylo, true)
  replication_source_identifier                          = try(each.value.replication_source_identifier, var.defaults.replication_source_identifier, null)
  restore_to_point_in_time                               = try(each.value.restore_to_point_in_time, var.defaults.restore_to_point_in_time, {})
  s3_import                                              = try(each.value.s3_import, var.defaults.s3_import, {})
  scaling_configuration                                  = try(each.value.scaling_configuration, var.defaults.scaling_configuration, {})
  security_group_description                             = try(each.value.security_group_description, var.defaults.security_group_description, null)
  security_group_name                                    = try(each.value.security_group_name, var.defaults.security_group_name, "")
  security_group_rules                                   = try(each.value.security_group_rules, var.defaults.security_group_rules, {})
  security_group_tags                                    = try(each.value.security_group_tags, var.defaults.security_group_tags, {})
  security_group_use_name_prefix                         = try(each.value.security_group_use_name_prefix, var.defaults.security_group_use_name_prefix, true)
  serverlessv2_scaling_configuration                     = try(each.value.serverlessv2_scaling_configuration, var.defaults.serverlessv2_scaling_configuration, {})
  shard_group_tags                                       = try(each.value.shard_group_tags, var.defaults.shard_group_tags, {})
  shard_group_timeouts                                   = try(each.value.shard_group_timeouts, var.defaults.shard_group_timeouts, {})
  skip_final_snapshot                                    = try(each.value.skip_final_snapshot, var.defaults.skip_final_snapshot, false)
  snapshot_identifier                                    = try(each.value.snapshot_identifier, var.defaults.snapshot_identifier, null)
  source_region                                          = try(each.value.source_region, var.defaults.source_region, null)
  storage_encrypted                                      = try(each.value.storage_encrypted, var.defaults.storage_encrypted, true)
  storage_type                                           = try(each.value.storage_type, var.defaults.storage_type, null)
  subnets                                                = try(each.value.subnets, var.defaults.subnets, [])
  tags                                                   = try(each.value.tags, var.defaults.tags, {})
  vpc_id                                                 = try(each.value.vpc_id, var.defaults.vpc_id, "")
  vpc_security_group_ids                                 = try(each.value.vpc_security_group_ids, var.defaults.vpc_security_group_ids, [])
}
